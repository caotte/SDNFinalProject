#Software Defined Networking
#Final Project Main File
#Written by Jay Morrissey, Carl Otte, and Michael Schieldt
#       On 20201/5/3


#The main file will iterate through all devices from a database, and
#perform automated actions through requests to each device

#import all modules here:
import sys
import json
import DevRequest


#CO this function will receive an IP address from the old network, and
#increment it to match the new network.
def incIP(Addr, octNum, incVal):
    adOcts = Addr.split('.') #splits the address
    adOcts[octNum - 1] = str(int(adOcts[octNum - 1]) + incVal) #increments octet
    return '.'.join(adOcts)


#CO this function will define the HSRP virtual address for input IPs
def virtualAddr(Addr, infoDict):
     #split the ip address and ip information strings into octets
     adOcts = Addr.split('.')
     infoOcts = infoDict['virtualIP'].split('.')
     
     #iterate through octets, replace any octet defined by the info dictionary
     for x in range(4):
          if infoOcts[x].isdigit():
               adOcts[x] = infoOcts[x]
     
     return '.'.join(adOcts)


#CO general pass information for new network
addressIncrement = {'octet': 2, 'amount': 15}
newVlan = {'name': 'VLAN120', 'number': '120'}
ospfInfo = {'PID': '10', 'area': '0'}
hsrpInfo = {'group': '1', 'virtualIP': 'x.x.x.1'}



#CO import the json file to generate a dictionary of network devices
#File name is passed as argument to the script at launch
with open('NetDevices.json') as devFile:
    devices = json.load(devFile)



#CO main loop, iterate through each device in the dictionary,
#and perform automated actions based on the device type
for device in devices:
    if devices[device]['API'] == 'NXOS':
        
        #TODO:
        #Request Cookie
        Cookie = getCookie(addr)
        #Increment addressing
        incIP(Addr, addressIncrement["octet"], addressIncrement["amount"])
        #Update device addressing
        IPResponse = ChangeIPInterface(Cookie, DesiredIpAddress, DesiredSubnetMask)
        #Request IP Int Brief
        IPinterfaceResponse = getInterfaces(addr, Cookie)
        #Add VLANs + 120
        VLANResponse = CreateVLAN(Cookie, DeviceIP, newVlan["name"], newVlan["number"])
        #Add SVI's
        SVIResponse = CreateSVI(Cookie, DeviceIP, SviInterfaceName, IpAddress, SubnetMask)
        #Add HSRP to all interfaces
        HSRPResponse = CreateHSRP(Cookie, DeviceIP, Interface, hsrpInfo["group"], hsprInfo["virtualIP"])
        #Add OSPF - prefer using RESTCONF
        OSPFResponse = CreateOSPF(Cookie, DeviceIP, Interface, ospfID["PID"], ospfInfo["area"])


    if devices['device']['API'] == 'IOSXE':

        #get interface list
        intList = getIntList(device["MgmtIP"])
        
        #loop through interfaces, incrementing IP
        for interface in intList:
            if interface['name'].startswith("G"):
                #Increment addressing
                newIP = incIP(interface['ipv4']['address']['ip'], addressIncrement["octet"], addressIncrement["amount"])
                #Update addressing
                updateDevInt(device["MgmtIP"], newIP, interface['ipv4']['address']['netmask'], interface['name'])
                
            #Add OSPF - prefer using RESTCONF


    else:
        raise AttributeError("Invalid API type.")
